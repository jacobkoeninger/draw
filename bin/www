#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('draw:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Setup socket io
 */
var io = require('socket.io')(server);

/* 
  Store users as objects (id and nickname) so multiple users can have the same nickname, but not the same id 
*/

/* 
  User:
  id, nickname, room(id?)
*/
let users = [];
let ids = [];
let rooms = [];

io.on('connection', function(socket){

  socket.on('join room', (roomId) => {
    socket.join(roomId);
    console.log(socket.id + " joined room " + roomId)
    socket.emit('room joined', roomId);
  });

  /* Maybe give room id on socket emit room joined */

  socket.on('create room', () => {
    const rnd = Math.floor(Math.random() * 10000);
    rooms.push({
      id: rnd,
      players: []
    });
    socket.join(rnd);
    console.log(socket.id + " has joined room " + rnd)
    socket.emit('room joined', rnd);
  });

  socket.on('send-nickname', (nickname) => {

    if(users.indexOf(nickname) == -1){      
        socket.nickname = nickname;
        users.push(socket.nickname);
    } else {
      // emit something to the user that this name is taken
    }

    if(ids.includes(socket.id) == -1){
      ids.push(socket.id);
    }

    console.log('users', users);
  
  });

  console.log('a user connected');
  socket.on('canvasUpdate', (obj) => {
    console.log(obj);
    
    io.emit('updateAllCanvases', {
      id: obj.id,
      data: obj.data
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
